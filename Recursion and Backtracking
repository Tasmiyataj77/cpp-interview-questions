#include <iostream>
#include <vector>
using namespace std;

bool isSafe(vector<string>& board, int row, int col, int n) {
    for (int i = 0; i < col; i++)
        if (board[row][i] == 'Q') return false;
    
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j] == 'Q') return false;
    
    for (int i = row, j = col; i < n && j >= 0; i++, j--)
        if (board[i][j] == 'Q') return false;
    
    return true;
}

void solveNQueensUtil(vector<vector<string>>& result, vector<string>& board, int col, int n) {
    if (col == n) {
        result.push_back(board);
        return;
    }
    
    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col, n)) {
            board[i][col] = 'Q';
            solveNQueensUtil(result, board, col + 1, n);
            board[i][col] = '.';
        }
    }
}

vector<vector<string>> solveNQueens(int n) {
    vector<vector<string>> result;
    vector<string> board(n, string(n, '.'));
    solveNQueensUtil(result, board, 0, n);
    return result;
}

void printSolution(const vector<vector<string>>& result) {
    for (const auto& sol : result) {
        for (const auto& row : sol) {
            cout << row << endl;
        }
        cout << endl;
    }
}

int main() {
    int N = 4;
    vector<vector<string>> solutions = solveNQueens(N);
    printSolution(solutions);
    return 0;
}
